design_analysis_task:
  description: >
    CRITICAL: You MUST use the "Design Image Analyzer" tool FIRST to load the image at {design_path}.
    Then perform a comprehensive professional design analysis of the ACTUAL IMAGE.

    OUTPUT FORMAT: You MUST create a beautifully formatted Markdown document with professional structure,
    using headers, tables, code blocks, emojis, and visual separators for maximum readability.

    REQUIRED MARKDOWN STRUCTURE:

    # 🎨 Design Analysis Report

    > **Project:** [Detected from image]
    > **Date:** [Current date]
    > **Analyzed by:** Visual Strategist AI

    ---

    ## 📐 1. Layout Architecture

    ### Overall Structure
    - **Grid System:** [e.g., 12-column grid, flexbox, CSS Grid]
    - **Layout Pattern:** [e.g., Header + Hero + Content + Footer]
    - **Breakpoints:** Desktop (1920px), Tablet (768px), Mobile (375px)
    - **Container Width:** [e.g., 1200px max-width, centered]

    ### Content Sections
    | Section | Position | Height | Purpose |
    |---------|----------|--------|---------|
    | Header/Nav | Top | 80px | Navigation |
    | Hero | Below header | 600px | Primary CTA |
    | ... | ... | ... | ... |

    ---

    ## 🎨 2. Color Palette

    ### Primary Colors
    ```css
    --primary: #HEX;     /* Main brand color */
    --secondary: #HEX;   /* Secondary accent */
    --accent: #HEX;      /* Call-to-action */
    ```

    ### Color Swatches
    | Color | Hex Code | RGB | Usage |
    |-------|----------|-----|-------|
    | 🟣 Primary | #4B3C99 | rgb(75, 60, 153) | Headers, buttons |
    | 🟠 Accent | #E85C23 | rgb(232, 92, 35) | CTAs, highlights |
    | ... | ... | ... | ... |

    ### Color Applications
    - **Background:** [colors used]
    - **Text:** [colors used with contrast ratios]
    - **Borders:** [colors used]
    - **Shadows:** [colors used]

    ---

    ## ✍️ 3. Typography System

    ### Font Families
    ```css
    --font-primary: 'Font Name', sans-serif;
    --font-secondary: 'Font Name', serif;
    --font-mono: 'Monospace Font', monospace;
    ```

    ### Type Scale
    | Element | Size | Weight | Line Height | Letter Spacing |
    |---------|------|--------|-------------|----------------|
    | H1 | 48px | 700 | 1.2 | -0.02em |
    | H2 | 36px | 600 | 1.3 | -0.01em |
    | H3 | 24px | 600 | 1.4 | 0 |
    | Body | 16px | 400 | 1.6 | 0 |
    | Small | 14px | 400 | 1.5 | 0 |

    ---

    ## 🧩 4. Component Inventory

    ### Navigation Components
    - **🔹 Navbar**
      - Type: Horizontal navigation bar
      - Position: Fixed top
      - Height: 80px
      - Background: Primary color
      - Elements: Logo (left), Nav links (center), CTA button (right)
      - Features: Sticky, dropdown menus

    ### Hero Components
    - **🔹 Hero Section**
      - Type: Full-width banner
      - Layout: Image background + centered content
      - Elements: H1 headline, subtitle, CTA button
      - Height: 600px

    ### Interactive Components
    - **🔹 Primary Button**
      - Style: Solid fill, accent color
      - Size: 48px height, 24px padding
      - Border radius: 8px
      - Hover: Darker shade + lift effect

    - **🔹 Secondary Button**
      - Style: Outlined, transparent background
      - Border: 2px solid primary
      - Hover: Filled background

    ### Content Components
    [List all cards, forms, icons, images, etc.]

    ### Footer Components
    [Describe footer layout and elements]

    ---

    ## 📏 5. Spacing System

    ### Spacing Scale
    ```css
    --space-xs: 4px;
    --space-sm: 8px;
    --space-md: 16px;
    --space-lg: 24px;
    --space-xl: 32px;
    --space-2xl: 48px;
    --space-3xl: 64px;
    ```

    ### Component Spacing
    | Component | Padding | Margin | Gap |
    |-----------|---------|--------|-----|
    | Navbar | 24px 40px | 0 | 32px |
    | Hero | 80px 40px | 0 | 24px |
    | ... | ... | ... | ... |

    ---

    ## 🎯 6. Visual Hierarchy

    ### Primary Focus Areas
    1. **Hero CTA Button** - Largest, brightest, centered
    2. **Navigation Logo** - Top-left, brand identity
    3. **Main Headline** - Large typography, high contrast

    ### Visual Weight Distribution
    - Top: 30% (Header + Hero)
    - Middle: 50% (Content sections)
    - Bottom: 20% (Footer)

    ---

    ## 💡 7. Implementation Recommendations

    ### Technical Approach
    - ✅ Use CSS Grid for main layout
    - ✅ Implement CSS custom properties for theming
    - ✅ Use semantic HTML5 elements
    - ✅ Mobile-first responsive design
    - ✅ Accessibility: WCAG 2.1 AA compliance

    ### Component Priority
    1. **High Priority:** Navbar, Hero, Primary CTA
    2. **Medium Priority:** Content cards, Forms
    3. **Low Priority:** Footer, Decorative elements

    ### Design Patterns Identified
    - Pattern 1: [Description]
    - Pattern 2: [Description]

    ---

    ## 📊 8. Summary

    ### Key Metrics
    - **Total Components:** [Count]
    - **Color Palette:** [Count] colors
    - **Font Families:** [Count] fonts
    - **Breakpoints:** [Count] responsive breakpoints

    ### Complexity Level
    **Rating:** ⭐⭐⭐⭐☆ (4/5)

    **Notes:** [Summary of design complexity and special considerations]

    ---

    *📝 This analysis was generated by Visual Strategist AI to guide component creation and AEM implementation.*

  expected_output: >
    A professional, beautifully formatted Markdown document (.md file) with:
    - Clear hierarchical structure with headers (H1, H2, H3)
    - Tables for structured data (colors, typography, spacing)
    - Code blocks for CSS values
    - Emojis for visual markers
    - Horizontal rules (---) for section separation
    - Blockquotes for important notes
    - Bullet points and numbered lists
    - Professional typography and spacing
    - Developer-friendly format suitable for handoff and documentation

    The document should be presentation-ready and could be shared with stakeholders.
  agent: visual_strategist

component_listing_task:
  description: >
    Based on the design analysis, create a professional component specification document in Markdown format.
    Review the design analysis report and identify the MOST IMPORTANT, VISIBLE components.

    OUTPUT FORMAT: Create a beautifully formatted Markdown document with professional structure.

    REQUIRED MARKDOWN STRUCTURE:

    # 🧩 Component Specification

    > **Project:** [From design analysis]
    > **Date:** [Current date]
    > **Total Components:** 2
    > **Created by:** UI Architect

    ---

    ## 📋 Component Selection Strategy

    Based on the design analysis, the following components have been prioritized for implementation:

    ### Selection Criteria
    - ✅ **Visibility:** High-impact, immediately visible components
    - ✅ **Functionality:** Core user interaction elements
    - ✅ **Priority:** Essential for MVP/initial launch
    - ✅ **Complexity:** Manageable scope for quality implementation

    ---

    ## 🎯 Selected Components

    ### Component 1: [component-name]

    **📦 Component Details**
    | Property | Value |
    |----------|-------|
    | **Filename** | `component-name.html` |
    | **Type** | Navigation / Section / Button / etc. |
    | **Priority** | HIGH |
    | **Complexity** | Low / Medium / High |

    **🎨 Design Specifications**
    - **Colors:**
      - Background: `#HEX` (from design analysis)
      - Text: `#HEX`
      - Accent: `#HEX`
    - **Typography:**
      - Font: [Font name from analysis]
      - Size: [Size from analysis]
      - Weight: [Weight from analysis]
    - **Spacing:**
      - Padding: [Values from analysis]
      - Margin: [Values from analysis]
      - Height: [Height from analysis]

    **🔧 Key Features**
    - Feature 1: [Description]
    - Feature 2: [Description]
    - Feature 3: [Description]

    **📐 Layout Structure**
    ```
    [Describe layout: e.g., "Logo (left) | Nav Links (center) | CTA Button (right)"]
    ```

    **🎭 Interactive Elements**
    - Hover states: [Description]
    - Click actions: [Description]
    - Responsive behavior: [Description]

    **📝 Content Requirements**
    - Text content: [Exact text from design]
    - Images: [Image requirements]
    - Icons: [Icon requirements]

    ---

    ### Component 2: [component-name]

    [Same structure as Component 1]

    ---

    ## 📊 Implementation Summary

    ### Build Order
    1. **[Component 1 name]** - Foundation component
    2. **[Component 2 name]** - Secondary component

    ### Technical Requirements
    - ✅ Self-contained HTML files
    - ✅ Embedded CSS (no external stylesheets)
    - ✅ Vanilla JavaScript (if needed)
    - ✅ Responsive design
    - ✅ Semantic HTML5
    - ✅ Accessibility compliant

    ### Quality Standards
    - **Accuracy:** 90%+ match to design
    - **Performance:** Lightweight, optimized
    - **Compatibility:** Modern browsers (Chrome, Firefox, Safari, Edge)
    - **Maintainability:** Clean, commented code

    ---

    ## 🎯 Success Metrics

    | Metric | Target |
    |--------|--------|
    | Design Accuracy | 90%+ |
    | Code Quality | Production-ready |
    | Load Time | < 1s |
    | Accessibility | WCAG 2.1 AA |

    ---

    *📝 This specification guides the component creation phase to ensure pixel-perfect implementation.*

    CRITICAL LIMITS:
    - Maximum 2 components ONLY - EXACTLY 2, NO MORE
    - Choose ONLY the 2 most important top-level components
    - Typically: navbar + one other major component (hero or footer)
    - Skip smaller elements like individual icons, text blocks, or utility components
    - Quality over quantity - fewer components done well is better

    List components from top to bottom as they appear in the design.
    Use clear, descriptive names that will become filenames (lowercase, hyphens).

  expected_output: >
    IMPORTANT: Output ONLY the component specification content as described in the template.
    Do NOT create additional explanatory text or meta-descriptions.

    A professional, production-ready Markdown document that will be saved as component_list.md with:
    - Clear hierarchical structure with headers starting with "# 🧩 Component Specification"
    - Tables for structured specifications
    - Code blocks for layout descriptions
    - Emojis for visual organization
    - Detailed specifications for each component including colors, typography, spacing, features
    - Implementation guidelines and quality standards
    - Easy for developers to reference during coding

    The document should be comprehensive enough that a developer can build the components
    without referring back to the design analysis.

    OUTPUT FORMAT: Start directly with "# 🧩 Component Specification" header.
    Do not include any meta-commentary about the file creation.
  agent: ui_architect
  context:
    - design_analysis_task

component_creation_task:
  description: >
    Create pixel-perfect HTML/CSS components for each component in the list EXACTLY ONCE.

    CRITICAL RULES:
    1. Read component_list.md to get the EXACT list of components to create
    2. There should be EXACTLY 2 components in the list
    3. Create each component EXACTLY ONCE - no duplicates
    4. After writing a file, NEVER create it again
    5. After BOTH components are created, you are DONE - provide summary and STOP
    6. Do NOT loop back to create more components

    STEP 1: READ component_list.md FILE
    - Open and read the output-ui_architect/component_list.md file
    - Extract the 2 component names from the markdown (look in "Selected Components" section)
    - Count the total number: Should be exactly 2 components
    - Write down the 2 component names and their specifications

    STEP 2: READ THE DESIGN ANALYSIS
    Before creating ANY component, review the design analysis report and extract:
    - EXACT color codes (e.g., Purple: #4B3C99, Orange: #E85C23)
    - EXACT font sizes, weights, and line heights
    - EXACT spacing values (padding, margins, gaps)
    - ACTUAL content text from the design (e.g., "IMPACTO JUVENTUD", "Sobre", "Nuestro Trabajo", "DONAR")
    - Layout structure and positioning

    STEP 2: CREATE COMPONENTS WITH 90%+ ACCURACY
    For EACH component, you MUST:

    1. USE EXACT COLORS - No guessing or approximation:
       - Look up the exact hex codes from the design analysis
       - Primary Purple: Use the EXACT value from analysis
       - Primary Orange: Use the EXACT value from analysis
       - All other colors: Use EXACT values from analysis

    2. USE EXACT CONTENT - Match what's actually in the design:
       - If the navbar shows "IMPACTO JUVENTUD", use that exact text
       - If buttons say "DONAR", use that exact text
       - If links say "Sobre", "Nuestro Trabajo", "Recursos", use those exact texts
       - Match the language (Spanish, English, etc.) from the design

    3. USE EXACT TYPOGRAPHY:
       - Font sizes from the analysis (e.g., 14px, 16px, 48px)
       - Font weights from the analysis (e.g., 400, 500, 700)
       - Line heights from the analysis
       - Text transforms (uppercase, etc.) as shown in design

    4. USE EXACT SPACING:
       - Padding values from the analysis
       - Margin values from the analysis
       - Gap values between elements
       - Component heights and widths

    5. MATCH VISUAL STRUCTURE:
       - Element positioning (left, center, right) - USE EXACT ALIGNMENT from analysis
       - Flexbox/Grid layouts as described
       - Background colors/images
       - Shadows, borders, border-radius

    6. IMPLEMENT INTERACTIVE ELEMENTS:
       - If component has DROPDOWNS: Add dropdown indicators (▼) and positioning
       - If component is a CAROUSEL: Add carousel dots, arrows, and basic JS
       - If component has HOVER states: Add CSS :hover effects
       - Use vanilla JavaScript for interactions (no external libraries)

    SPECIAL: NAVBAR/HEADER 100% ACCURACY REQUIREMENTS
    The navbar is THE MOST CRITICAL component. For navbar.html, you MUST achieve 100% accuracy:

    1. EXACT LAYOUT STRUCTURE:
       - Measure the design: Is it 3-section layout (logo | nav | button)?
       - Logo container: justify-content: flex-start
       - Nav links container: justify-content: center OR flex-start (check design!)
       - CTA/Right section: justify-content: flex-end
       - Use display: flex with space-between for main container

    2. EXACT SPACING (CRITICAL):
       - Logo-to-nav gap: Measure and match exactly (e.g., 40px, 60px)
       - Gap between nav items: Match exactly (e.g., 32px, 40px)
       - Navbar height: Match exactly (e.g., 70px, 80px, 90px)
       - Horizontal padding: Match exactly (e.g., 24px, 40px, 60px)

    3. EXACT ALIGNMENT:
       - Logo: LEFT side, vertically centered
       - Nav links: CENTER or LEFT (check design!), vertically centered
       - If nav is CENTER: Use separate flex container with justify-content: center
       - If nav is LEFT with logo: Put both in same flex-start container
       - Buttons/Icons: RIGHT side, vertically centered

    4. EXACT CONTENT:
       - Logo text/image: EXACT text from design
       - Each nav link: EXACT text from design (case-sensitive)
       - Dropdown indicators: Add ▼ only to items that have it in design
       - Button text: EXACT text from design

    5. PERFECT VERTICAL CENTERING:
       - All elements: align-items: center
       - Logo, nav items, buttons: all perfectly aligned vertically

    STEP 3: TECHNICAL REQUIREMENTS
    - Each component must be self-contained (no external CSS files)
    - Include <!DOCTYPE html>, <html>, <head>, and <body>
    - Embed all CSS in <style> tags in the <head>
    - Use CSS variables for colors for consistency
    - Use semantic HTML5 elements
    - Make components responsive
    - Add clear comments
    - Include <script> tags for interactive components (carousels, dropdowns, etc.)
    - Ensure exact alignment matches the design (justify-content: flex-start/center/flex-end)

    STEP 4: USE THE FILE WRITER TOOL
    For each component, use the "File Writer" tool with:
    - filename: Component name with .html extension (e.g., "navbar.html")
    - content: Complete HTML document
    - folder: "output-ui_architect" (default, can be omitted)

    STEP 5: CREATE EXACTLY 2 COMPONENTS - TRACK YOUR PROGRESS

    Component 1 (from list):
    - Use File Writer tool to create output-ui_architect/[component-1-name].html
    - Mark: ✓ DONE with component 1

    Component 2 (from list):
    - Use File Writer tool to create output-ui_architect/[component-2-name].html
    - Mark: ✓ DONE with component 2

    STEP 6: FINAL CHECK - BOTH 2 COMPONENTS CREATED? YES → STOP NOW!
    After creating the 2nd component, you have completed ALL components.

    Final checklist:
    ✓ Component 1 created?
    ✓ Component 2 created?

    If BOTH are YES: YOU ARE DONE. Provide final summary and STOP IMMEDIATELY.

    DO NOT:
    - Create any component twice
    - Create more than 2 components
    - Create additional components not in the list
    - Loop back to create more files
    - Continue after both components are created

  expected_output: >
    FINAL SUMMARY - 2 components created:

    ✓ output-ui_architect/[component-1].html - Created successfully
    ✓ output-ui_architect/[component-2].html - Created successfully

    TOTAL: 2 files created in output-ui_architect/ folder
    STATUS: COMPLETE - All components from the list have been created
    NEXT STEP: Task is finished, no further action needed
  agent: ui_architect
  context:
    - design_analysis_task
    - component_listing_task

aem_component_list_task:
  description: >
    List all available HTML components from the output-ui_architect/ folder and present them
    to the user for selection.

    STEP 1: Scan the output-ui_architect directory for .html files
    STEP 2: Create a list of all HTML components found
    STEP 3: For each component, extract:
       - Component filename (e.g., navbar.html)
       - Component name (e.g., navbar)
       - Brief description if available from the file

    STEP 4: Present the list to the user in a clear format:

    Available HTML Components:
    1. navbar.html - Navigation component
    2. hero-section.html - Hero section component
    3. button-primary.html - Primary button component
    ... etc

    STEP 5: Ask user which component to convert to AEM
    Use the AskUserQuestion tool to let the user select ONE component

  expected_output: >
    A clear list of available HTML components and the user's selection
    for which component to convert to AEM next.
  agent: aem_alchemist

aem_component_conversion_task:
  description: >
    Convert the selected HTML component into a fully editable AEM component.

    INPUT: Selected component name from previous task (e.g., "navbar")

    STEP 1: READ THE HTML COMPONENT
    - Read the HTML file from output-ui_architect/{selected_component}.html
    - Analyze the structure, styles, content, and interactive elements
    - Identify all elements that should be editable by authors

    STEP 2: CREATE AEM COMPONENT STRUCTURE
    Create the following files in {aem_project_path}:

    A. Component Definition (.content.xml):
       Location: ui.apps/src/main/content/jcr_root/apps/{aem_app_id}/components/{component_name}/.content.xml
       - Set componentGroup to "{aem_component_group}"
       - Set jcr:title to readable name
       - Set jcr:description

    B. HTL Template ({component_name}.html):
       Location: ui.apps/src/main/content/jcr_root/apps/{aem_app_id}/components/{component_name}/{component_name}.html
       - Use data-sly-use to reference Sling Model
       - Convert HTML to HTL syntax
       - Replace hardcoded text with ${model.propertyName}
       - Add data-sly-test for conditional rendering
       - Use data-sly-list for repeating elements (nav items, etc.)

    C. Sling Model (Java):
       Location: core/src/main/java/com/{aem_namespace}/core/models/{component_name}Model.java
       - Create @Model annotation with adaptables = Resource.class
       - Add @ValueMapValue for each editable property
       - Add @ChildResource for multifields
       - Implement getters for all properties
       - Add @PostConstruct for initialization if needed

    D. Dialog (_cq_dialog.xml):
       Location: ui.apps/src/main/content/jcr_root/apps/{aem_app_id}/components/{component_name}/_cq_dialog.xml
       - Create tabs for organization (Content, Styling, Advanced)
       - Add TextField for text properties
       - Add PathField for links and images
       - Add ColorField for color properties
       - Add NumberField for spacing/sizing
       - Add Multifield for repeating elements (nav links, etc.)
       - Use proper fieldDescription for author guidance

    E. ClientLib (CSS/JS):
       Location: ui.apps/src/main/content/jcr_root/apps/{aem_app_id}/clientlibs/clientlib-{component_name}/
       - Extract CSS from HTML into separate .css file
       - Extract JS from HTML into separate .js file
       - Create .content.xml with categories
       - Create css.txt and js.txt for file references

    STEP 3: MAKE EVERYTHING EDITABLE
    Ensure these are editable in the dialog:
    - All text content (headings, paragraphs, labels, button text)
    - All links and URLs
    - All images (use PathField with image picker)
    - Colors (background, text, borders)
    - Spacing (padding, margins)
    - Repeating elements (use Multifield for nav items, cards, etc.)

    STEP 4: USE THE FILE WRITER TOOLS
    - Use "AEM File Writer" tool to write each file to correct location
    - Ensure proper folder structure is created
    - Write all 5 types of files (definition, HTL, Java, dialog, clientlib)

    STEP 5: VERIFY COMPLETENESS
    Before finishing, confirm:
    - All files created successfully
    - Sling Model has all necessary properties
    - Dialog has all editable fields
    - HTL template references model correctly
    - ClientLib is properly configured

  expected_output: >
    Complete AEM component created with all necessary files:
    - Component definition (.content.xml)
    - HTL template
    - Sling Model (Java)
    - Component dialog
    - ClientLib (CSS/JS)

    Summary of all files created with their paths.
  agent: aem_alchemist
  context:
    - aem_component_list_task

aem_build_deploy_task:
  description: >
    Build the AEM project and deploy the newly created component to the
    local AEM instance.

    STEP 1: NAVIGATE TO AEM PROJECT
    - Change directory to {aem_project_path}

    STEP 2: RUN MAVEN BUILD
    - Execute: mvn clean install -PautoInstallPackage
    - This will:
      * Compile the Java Sling Model
      * Package the component files
      * Deploy to AEM at http://localhost:4502

    STEP 3: MONITOR BUILD OUTPUT
    - Check for compilation errors in Java code
    - Check for packaging errors
    - Check for deployment success
    - Look for "BUILD SUCCESS" message

    STEP 4: VERIFY DEPLOYMENT
    - Confirm packages were installed
    - Check for any deployment warnings or errors

    STEP 5: REPORT STATUS
    If BUILD SUCCESS:
      - Report successful deployment
      - Provide component path: /apps/{aem_app_id}/components/{component_name}
      - Provide CRXDE link to component

    If BUILD FAILED:
      - Report the error details
      - Suggest fixes based on error type
      - Ask if user wants to retry after fixing

  expected_output: >
    Build and deployment status report:
    - Maven build result (SUCCESS or FAILED)
    - Any errors or warnings encountered
    - Component location in AEM
    - CRXDE link for verification
    - Next steps for testing
  agent: aem_alchemist
  context:
    - aem_component_conversion_task

aem_testing_task:
  description: >
    Guide the user through testing the AEM component and gather feedback.

    STEP 1: PROVIDE TESTING INSTRUCTIONS
    Give the user clear instructions:

    "Please test the {component_name} component in AEM:

    1. Open AEM Sites Editor:
       http://localhost:4502/editor.html/content/{aem_app_id}/us/en.html

    2. Add the component to a page:
       - Click '+' to add component
       - Find '{component_name}' in component browser
       - Drag it onto the page

    3. Test the component dialog:
       - Click the component to select it
       - Click the wrench icon to open dialog
       - Verify all fields are present and editable
       - Fill in some test values
       - Click 'Done'

    4. Verify component rendering:
       - Check if component displays correctly
       - Verify styles are applied
       - Check responsive behavior
       - Test any interactive elements

    5. Preview the page:
       - Click 'Preview' mode
       - Verify component works in preview
    "

    STEP 2: ASK FOR USER CONFIRMATION
    Use AskUserQuestion tool to ask:
    "Did the {component_name} component work correctly?"

    Options:
    - "Yes, it works perfectly"
    - "No, there are issues"
    - "Partially works, needs fixes"

    STEP 3: IF ISSUES FOUND
    If user reports issues:
    - Ask: "What issues did you encounter?"
    - Get detailed description of problems
    - Analyze the issues
    - Suggest fixes or offer to fix automatically

    STEP 4: IF WORKING CORRECTLY
    If component works:
    - Mark component as completed
    - Ask if user wants to convert another component
    - Return to component selection

  expected_output: >
    Testing report with:
    - Testing instructions provided to user
    - User's feedback on component functionality
    - Status: Working / Has Issues / Needs Fixes
    - If issues: List of problems encountered
    - Next action: Fix issues or move to next component
  agent: aem_alchemist
  context:
    - aem_build_deploy_task
